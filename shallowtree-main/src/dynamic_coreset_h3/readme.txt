his repository contains the source code of a program related to the arcticle xxx

The algorithm maintains a coreset of a dynamic dataset and updates a k-means solution using this coreset. It uses a modified tree with a fixed height and arity	

To compile, use 'make' in the source directory.
The program will be compiled into the build directory. 
The code was tested on ubuntu/debian.


Besides the optimized dynamic coreset algorithm, several baselines are computed as comparison. 
Those include:
	A baseline dynamic coreset without optimizations
	A static coreset that is recomputed from scratch
	A coreset generated by randomly selecting points
	Applying the k-means algorithm from scratch without a coreset
	An ILP (Using the Gurobi-Solver), which is commented out.

---Command Line Arguments---

One must specify the following mandatory command line arguments:
	-f Input file containing the dynamic dataset
	-o Output file for the resulting measurements
	-k Number of clusters
	-d Dimension of the dataset
	-n Number of rows to read from the input file
	-c Size of the final coreset. Alternatively -l and -e for lambda and epsilon

Optional command line arguments are:
	-x Factor for the insertion shortcut. Only recalculate the inner coresets if the current coreset gets larger than this factor times s. If not only insert the point directly to the coreset
	-v Cutoff for the remove shortcut. After this many operations, all marked points are removed regardless
	--skip All baselines and are recalculated and measurements written to the output file every "skip" operations
	-i Number of points used to initialize the tree. Default is c+1
	-y Facor used to change the value for "k" for the inner coresets. The outer corest maintains the old value for "k"
	-s Factor used to multipy the cardinality of the inner coresets "s" with.
	-t Factor used to multipy $s$ to get the cutoff of points at which inner coresets are calculated and the points are not just passed throught to the parent node. Includes the factor of -s
	-m Factor used to multiply the current number of leafs to get the number of points allowed in each leaf.
	
The height of the tree can be changed to x by renaming the folders 'dynamic_coreset_hx' to just 'dynamic_coreset. The arity of the tree is set in the file 'dynamic_coreset/coreset_tree.h' on line 16

---Input File Format---

The input file should contain the dynamic dataset with the following format:
Lines with a # in the first column are ignored.
Each line corresponds to an insertions or deletion of a point with the following columns:
	1. Unique Index of the point to insert or delete (integer)
	2. A "1" if the point gets inserted or a "0" if it gets deleted
	3. The weight of the points
	>3 Coordinates of the point to insert

Each column can be seperated by one of the following symbols: "\t" | " " | "," | ";"

---Output File Format---

The output file contains a header with the used parameters and rows of measurements. One for every "skip" steps
Each row contains the following columns:
	Operations: The index of the operation when the measurements were done
	DC_t: The average runtime of computing the dynamic coreset during the last "skip" steps 
	DK_t: The average runtime of computing the k-means solution on the dynamic coreset during the laset "skip" steps
	D_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on the dynamic coreset
	DC_q: The distortion of the dynamic coreset
	DK_q: The quality of the k-means solution calculated on the dynamic coreset
	
	OC_t: The average runtime of computing the optimized dynamic coreset during the last "skip" steps 
	OK_t: The average runtime of computing the k-means solution on the optimized dynamic coreset during the laset "skip" steps
	O_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on the optimized dynamic coreset
	OC_q: The distortion of the optimized dynamic coreset
	OK_q: The quality of the k-means solution calculated on the optimized dynamic coreset
	
	SC_t: The runtime of computing the static coreset
	SK_t: The runtime of computing the k-means solution on the static coreset
	S_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on the static coreset
	SC_q: The distortion of the static coreset
	SK_q: The quality of the k-means solution calculated on the static coreset

	RC_t: The runtime of computing the random coreset
	RK_t: The runtime of computing the k-means solution on the random coreset
	R_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on the random coreset
	RC_q: The distortion of the random coreset
	RK_q: The quality of the k-means solution calculated on the random coreset

	T_t: The runtime of computing the k-means solution directly on the coreset
	T_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on directly on the total dataset

	ILP_t The runtime of compution the k-means solution directly on the total dataset using an ILP
	ILP_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on directly on the total dataset using the ILP


	MIQP_t The runtime of compution the k-means solution directly on the total dataset using an MIQP
	MIQP_c: The average squared cost of every point in the total dataset when applying the best k-means solution found on directly on the total dataset using the MIQP


---General Folder Structure---

The program is split into several folders:
	coreset: Contains the static coreset modified to work within the dynamic algorithm
	coreset_old: Contains the unmodified static algorithm to use as a baseline
	dynamic_coreset: Contains the dynamic coreset algorithm
	ILPBaseline: Contains the ILP and MIQP as baselines
	kmeanspp: Faster k-means++ algorithm for very large $k$. Not used
	utils: Useful functions to handly the datapoints
